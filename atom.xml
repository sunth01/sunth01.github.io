<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SunthBlog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-10T09:39:27.580Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/04/10/%E5%AD%99%E4%B8%96%E9%91%AB-%E9%80%90%E5%AD%97%E7%A8%BF/"/>
    <id>http://example.com/2023/04/10/%E5%AD%99%E4%B8%96%E9%91%AB-%E9%80%90%E5%AD%97%E7%A8%BF/</id>
    <published>2023-04-10T09:39:22.640Z</published>
    <updated>2023-04-10T09:39:27.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="问题1-你先做个自我介绍"><a href="#问题1-你先做个自我介绍" class="headerlink" title="问题1-你先做个自我介绍?"></a>问题1-你先做个自我介绍?</h2><p>​       你好，我叫孙世鑫，今年25岁，20年毕业</p><h1 id="项目难点补充"><a href="#项目难点补充" class="headerlink" title="项目难点补充"></a>项目难点补充</h1><h2 id="问题1-在项目当中你是如何实现页面缓存控制的"><a href="#问题1-在项目当中你是如何实现页面缓存控制的" class="headerlink" title="问题1-在项目当中你是如何实现页面缓存控制的?"></a>问题1-在项目当中你是如何实现页面缓存控制的?</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>来源:<a href="https://juejin.cn/post/7046014327580524557">项目难点专栏-vue页面缓存控制</a><br>回答需要包含:<br>  什么场景下需要做组件缓存?<br>  使用keep-alive来缓存组件的步骤有哪些?<br>  如何解决keep-alive只缓存部分页面的问题?</p><h3 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h3><p>场景：当我们实现一个列表页面,当点击详情,或者点击其他栏目之后,再返回列表页面的时候,我们希望回到离开之前的列表页面,并且回来的时候,滚动条的位置,分页信息,频道信息都是我们离开之前样子,这种情况下我们就需要做页面的缓存，</p><p>步骤：</p><ul><li><p>在需要缓存的组件外层添加<code>&lt;keep-alive&gt;</code>标签，</p></li><li><p>包含三个属性：</p><ul><li>include 只有名称匹配的组件才会被缓存，</li><li>exclude 名称匹配的组件都不会被缓存，</li><li>max 传一个数字， 定义最大缓存组件的数量，超过这个定义的个数，就会删除组件中最久没有访问的组件实例销毁掉，为新组件的出空间。</li></ul></li><li><p>在需要缓存的组件中，添加一个<code>name</code>属性，该属性的值将作为组件的缓存标识符</p></li><li><p>keep-alive中存在于两个钩子函数，activated:组件在激活状态时调用的钩子函数，deactivated:组件失活时调用的钩子函数</p></li><li><p>确保在需要缓存的组件中，使用了正确的生命周期钩子函数。当组件被缓存时，Vue会调用<code>activated</code>钩子函数，而当组件被销毁时，Vue会调用<code>deactivated</code>钩子函数。因此，需要确保在这两个钩子函数中处理组件的状态</p></li></ul><p>使用<code>&lt;keep-alive&gt;</code>组件来包裹<code>&lt;router-view&gt;</code>实现缓存页面</p><p>针对页面滚动条切换之后没有缓存的情况，</p><p>使用vh视口单位固定列表高度，通过ref获取到需要缓存滚动条的位置数据存储到本地，在mounted钩子函数中使用$refs获取这个dom元素,通过onscroll事件的事件对象获取当前滚动条的位置，然后通过localStoragesetItem存到本地，在这个组件激活状态时在activated将这个本地中的滚动条位置赋值给现在的位置，实现持久化处理</p><p>部分页面缓存解决</p><p>方式1:通过v-if<br>首先在路由配置中添加meta(路由元信息)这个属性:给需要缓存的组件添加这个属性keepAlive:true<br>在组件中设置两个挂载点，一个是需要缓存的，一个是不需要缓存的，设置v-if去调用路由配置中的meta属性判断meta中的keepAlive是否为true，得出需要缓存的页面</p><p>方式2:给<code>keep-alive</code>设置<code>include</code>属性<br>首先在路由配置中给路由添加name属性,在keep-alive组件设置<code>include</code>属性,include属性的值为字符串数组变量,包含要缓存的组件的name</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>首先什么是keep-alive?<br>keep-alive是vue的内置组件，keep-alive本身不会渲染出来，通常和路由挂载组件<router-view></router-view>还有和动态组件<component></component>配合使用，它在包裹动态组件时，会缓存不活动的组件，而不是销毁他们<br>kepp-alive中的三个属性:<br>1.include:可以传字符串还有正则表达式，只有名称匹配的组件才会被缓存<br>2.exclude:可以传字符串还有正则表达式，名称匹配的组件都不会被缓存<br>3.max:传一个数字， 定义最大缓存组件的数量，超过这个定义的个数，就会删除组件中最久没有访问的组件实例销毁掉，为新组件的出空间<br>keep-alive中存在于两个钩子函数<br>activated:组件在激活状态时调用的钩子函数 deactivated:组件失活时调用的钩子函数</p><p>问题1:什么场景下需要做组件缓存?<br>当我们在某些场景下不需要让页面重新加载的时候就可以使用keep-alive<br>eg:<br>比如说我们一个项目中有列表页，还有首页，还有我的页面，当我在列表页看了一些数据后，然后去到我的页面，返回列表页那么国<br>来看到的数据也应该还在原来的位置，这时候就需要用到keep-alive的缓存特性了</p><p>问题2:使用keep-alive来缓存组件的步骤有哪些?</p><p>1.使用keep-alive将页面中的一级路由挂载点根组件中的<router-view></router-view>包裹起来，还有二级路由挂载点包裹起实现组件缓存，然后这样的话再两个页面中切换的话，频道的位置虽然被保存了，但是滚动条的位置初始化了<br>2.解决滚动条初始化的问题:<br>1.固定列表页的嘞个列表的高度，使用vh相对于视口的单位<br>2.并目监听滚动条的位置，在标签中设置ref属性，在mounted钩子函数中使用$refs获取这个dom元素,<br>通过onscroll事件的事件对象获取当前滚动条的位置，然后通过localStoragesetItem存到本地，在这个组件激活状态时在activated将这个本地中的滚动条位置赋值给现在的位置，实现持久化处理</p><p>问题3:如何解决keep-alive只缓存部分页面的问题?<br>方式1:通过v-if<br>首先在路由配置中添加meta(路由元信息)这个属性:给需要缓存的组件添加这个属性keepAlive:true<br>在组件中设置两个挂载点，一个是需要缓存的，一个是不需要缓存的，设置v-if去调用路由配置中的meta属性判断meta中的keepAlive是否为true，得出需要缓存的页面</p><p>方式2:给<code>keep-alive</code>设置<code>include</code>属性<br>首先在路由配置中给路由添加name属性,在keep-alive组件设置<code>include</code>属性,include属性的值为字符串数组变量,包含要缓存的组件的name</p><h1 id="项目-人资中台项目"><a href="#项目-人资中台项目" class="headerlink" title="项目-人资中台项目"></a>项目-人资中台项目</h1><h2 id="问题1-你给我介绍下-你最近做过这个项目"><a href="#问题1-你给我介绍下-你最近做过这个项目" class="headerlink" title="问题1-你给我介绍下,你最近做过这个项目?"></a>问题1-你给我介绍下,你最近做过这个项目?</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>可以从项目背景,用到哪些技术栈,负责了哪些模块,和存在的难点和亮点从这几个维度来回答,,要对具体业务实现要了解,防止面试官进一步询问</p><h3 id="回答-1"><a href="#回答-1" class="headerlink" title="回答"></a>回答</h3><p>这个项目是pc端的vue项目,主要做企业内部管理</p><ul><li>1.这个项目基于vue的后台管理系统模板vue-element-admin,用到的技术栈,vue2、Vue-Router、Vuex、ui 库用的是Element-UI、请求库用的是axios</li><li>2.我主要负责了登录,组织架构,角色管理,员工管理,权限管理,考勤,工资,社保等模块</li><li>3.其中比较难的地方,包括封装了些复杂的组件，例如图片上传组件、和日历组件和实现些复杂的业务流程,例如权限控制、excel的导入导出、树形数据转换、国际化</li></ul><h2 id="问题2-这个项目当中有没有比较难的-有亮点的地方"><a href="#问题2-这个项目当中有没有比较难的-有亮点的地方" class="headerlink" title="问题2-这个项目当中有没有比较难的,有亮点的地方?"></a>问题2-这个项目当中有没有比较难的,有亮点的地方?</h2><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p>可以从有哪些难点,和为什么会是难点,如何解决难点,这几个维度来回答,注意需要难点的细节要了解,防止面试官进一步询问</p><h3 id="回答-2"><a href="#回答-2" class="headerlink" title="回答"></a>回答</h3><ol><li><p>第1方面,比较复杂的组件封装,例如项目封装了细节比较多的组件例如图片上传组件,和日历组件</p></li><li><p>第2方面,比较复杂的业务流程,例如权限控制,excel的导入导出,树形数据转换,国际化</p></li></ol><h2 id="问题3-这个项目当中你封装过哪些组件"><a href="#问题3-这个项目当中你封装过哪些组件" class="headerlink" title="问题3-这个项目当中你封装过哪些组件?"></a>问题3-这个项目当中你封装过哪些组件?</h2><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><p>可以从组件封装的思路,应用场景这几个维度来回答, 要对组件具体实现要了解,防止面试官进一步询问</p><h3 id="回答-3"><a href="#回答-3" class="headerlink" title="回答"></a>回答</h3><p>可以从组件封装的思路,应用场景这几个维度来回答, 要对组件具体实现要了解,防止面试官进一步询问</p><ul><li>1.第1类为了提高代码的可维护性,不让父组件过于复杂,封装了局部组件,例如比较复杂的对话框组件,树形节点的组件,标签栏内容组件</li><li>2.第2类为了提高代码的可复用性,把多个页面都有的部分,封装了全局组件,例如工具栏组件,图片上传组件</li><li>3.第3类为了方便第三方库的使用,和增强其功能,做了组件的二次封装,例如日历组件,雷达图组件</li></ul><h2 id="问题4-你的项目中-是如何实现登录功能的"><a href="#问题4-你的项目中-是如何实现登录功能的" class="headerlink" title="问题4-你的项目中,是如何实现登录功能的?"></a>问题4-你的项目中,是如何实现登录功能的?</h2><h3 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h3><p>可以从登录核心,token的获取,token的原理,token持久化,token的发送,token的实效这几个维度来回答</p><h3 id="回答-4"><a href="#回答-4" class="headerlink" title="回答"></a>回答</h3><p>实现登录功能，最核心的技术是JWT（token），我们通过token来记录用户的登录状态，并把token存储到vuex中</p><p>首先要调用登录的api接口，把用户填写的表单信息进行校验之后发送到后端，</p><p>后端校验通过之后，会返回一个token字符串，里面记录的是用户的基本信息，</p><p>为了项目中能够更方便的获取和使用token，我们会把token存储到vuex中</p><p>由于 vuex 中的数据都是存储在内存中的,页面一刷新数据就丢失，所以我们通过js-cookie这个模块可以把vuex的数据持久化存储到本地</p><p>在用户调用接口的时候，我们会通过axios的请求拦截器判断用户请求的是否为有权限的接口，如果是则会通过config.headers对象，为这次请求添加Authorization的请求头,值就是vuex中存储的token,有权限的接口才能调用成功</p><p>如果token过期了,会触发axios中的响应拦截器,通过err.response.status可以判断响应状态码是否为401,如果是则证明token过期,我们则需要清空vuex中数据,并通过路由的编程式导航api跳转到login页面,让用户重新登录</p><h2 id="问题5-项目中的-axios-咋用的"><a href="#问题5-项目中的-axios-咋用的" class="headerlink" title="问题5-项目中的 axios 咋用的?"></a>问题5-项目中的 axios 咋用的?</h2><h3 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h3><p>可以从axios 的作用、如何封装、如何使用这几个维度来回答</p><h3 id="回答-5"><a href="#回答-5" class="headerlink" title="回答"></a>回答</h3><p>axios 在项目中,主要用来发起 Ajax 的数据请求,专门用来实现前后端数据交互的</p><ul><li>1.我们在项目中会对 axios 做进一步的封装。会创建一个 src/utils/request.js 的模块,里面调用，axios.create() 函数,来创建 axios 的实例对象。在调用 create 函数期间可以全局配置请求的baseURL 根路径等。</li><li>2.对于功能类似的 API 接口,我们会在 src/api 目录下进行接口的封装。这样可以提高 API 接口的复用性。</li><li>3.在项目中还会用到 axios 的拦截器。它主要的应用场景是： a. 基于请求拦截器,为有权限的接口统一添加 Authorization 的 token 认证 b. 基于响应拦截器,判断响应状态码是否400或者500,如果是提示用报错信息,如果为 401,处理 token 失效做退出处理,调整到登录页面</li></ul><h2 id="问题6-项目中如何使用vuex的"><a href="#问题6-项目中如何使用vuex的" class="headerlink" title="问题6-项目中如何使用vuex的?"></a>问题6-项目中如何使用vuex的?</h2><h3 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h3><p>可以从存放的数据,使用的步骤,使用的场景这几个维度来回答</p><h3 id="回答-6"><a href="#回答-6" class="headerlink" title="回答"></a>回答</h3><p>为了方便代码的访问,项目当中把公共的数据,如token,用户信息,路由信息放到vuex当中管理</p><ul><li>1.为了方便维护vuex,首先采用模块化的写法,定义了用户和权限模块</li><li>2.在用户模块创建state存放token和用户信息,并且定义了设置和清除信息的mutations,定义发请求,获取信息的actions</li><li>3.在权限模块创建state存放路由的信息,并且定义设置和清除信息的mutations,定义过滤动态路由的action</li><li>4.定义好模块之后,在登录页面调用用户模块的登录action,在路由前置守卫当调用获取用户信息的action和过滤路由action</li><li>5.最后在请求拦截器当中访问token,在首页访问用户信息,在侧边栏菜单访问路由信息</li></ul><h2 id="问题7-讲讲上传组件的实现思路"><a href="#问题7-讲讲上传组件的实现思路" class="headerlink" title="问题7-讲讲上传组件的实现思路?"></a>问题7-讲讲上传组件的实现思路?</h2><h3 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h3><p>可以从组件用途,上传的核心,组件实现步骤和功能,这几个维度来回答</p><h3 id="回答-7"><a href="#回答-7" class="headerlink" title="回答"></a>回答</h3><p>上传组件是通过对element-ui的上传组件的二次封装,以满足我们的需求</p><ul><li>1.我们项目当中上传组件是用来上传图片,用来显示用户的头像信息</li><li>2.核心是使用三方云服务,把图片或文件存储到云服务器,云服务器的存储 url 存储到公司自由服务器</li><li>3.首先创建公共组件,组件当中使用element-ui的upload组件,通过样式穿透,覆盖了它的样式,并且通过http属性,覆盖了它默认的上传行为</li><li>4.然后完善了一些细节,增加一些功能,例如上传前验证文件大小和格式,和文件的数量;上传中显示上传进度条;上传完成保存文件地址,点击组件预览大图和删除图片</li></ul><h2 id="问题8-讲讲-excel-导入和导出的实现"><a href="#问题8-讲讲-excel-导入和导出的实现" class="headerlink" title="问题8-讲讲 excel 导入和导出的实现?"></a>问题8-讲讲 excel 导入和导出的实现?</h2><h3 id="说明-8"><a href="#说明-8" class="headerlink" title="说明"></a>说明</h3><p>可以从实现的思路,难点,步骤这几个维度来回答</p><h3 id="回答-8"><a href="#回答-8" class="headerlink" title="回答"></a>回答</h3><p>公司的导入导出因为数据量并不大,所以采用的主要方式的前端主导的导入导出的方案</p><ul><li>1.导入的实现,通过第3方包把 excel 表格内容解析,转化成 js 的数据类型,然后通过后端批量导入接口的完成导入</li><li>2.这里主要的难点在于数据处理,第3方包处理之后的数据和后端接口要求的数据并不一致,需要首先定义表头的中英文的映射关系对象,然后对数组进行遍历,然后对数组中的对象元素在进行遍历,然后根据映射关系,生成新的对象,和生成新的对象数组</li><li>3.导出的实现,通过调用的后端接口,获取需要导出的数据,然后转化成第三方包要求的格式,通过第三方包生成excel文件,然后触发浏览器的下载功能进行下载</li><li>4.这里的难点,也主要在于数据处理,不仅通过双向循环对表头中英文做转换,还需要过滤出部分导出的字段,和对日期字段,和特殊字段做格式化操作</li></ul><h2 id="问题9-系统如何进行权限控制和实现"><a href="#问题9-系统如何进行权限控制和实现" class="headerlink" title="问题9-系统如何进行权限控制和实现?"></a>问题9-系统如何进行权限控制和实现?</h2><h3 id="说明-9"><a href="#说明-9" class="headerlink" title="说明"></a>说明</h3><p>可以从权限包含哪几方面,如何实现,关键步骤这几个维度来回答</p><h3 id="回答-9"><a href="#回答-9" class="headerlink" title="回答"></a>回答</h3><p>权限用来确保用户只能访问到被分配的资源</p><ul><li>权限主要分为4个方面,分别是接口权限、路由权限、菜单权限、按钮权限<ul><li>1.接口权限,保证部分接口要用户登录后才能访问,一般采用 jwt 的形式来验证,登录完拿到 token ,将token 存起来,通过 axios 请求拦截器进行拦截,每次请求的时候头部携带, 没有通过的话一般返回401 ,跳转到登录页面重新进行登录token</li><li>2.路由权限,保证登录后才能访问到其他页面,一般通过路由前置守卫来做控制,在跳转前判断用户要访问的页面是不是登录页面或者404页面,如果是允许它跳转,如果是其他页面,要判断用户有没有token,如果有token才允许跳转,如果没有token就跳转到登录页面</li><li>3.菜单权限,保证不同的角色有不同的菜单,一般通过让用户有不同路由配置来控制,具体是在登录完成后,在路由前置守卫中,获取用户的权限信息,然后筛选有权限访问的路由,通过调用路由的addRoutes 添加动态路由</li><li>4.按钮权限,保证不同的角色页面上有不同按钮,一般通过定义全局方法,要么在Vue原型链上,要么通过全局混入方法,在页面按钮通过v-if调用方法,并且传标识,在用户权限数据当中判断改用户是否有该按钮的权限</li></ul></li></ul><h2 id="问题10-讲讲国际化实现思路"><a href="#问题10-讲讲国际化实现思路" class="headerlink" title="问题10-讲讲国际化实现思路?"></a>问题10-讲讲国际化实现思路?</h2><h3 id="说明-10"><a href="#说明-10" class="headerlink" title="说明"></a>说明</h3><p>可以从做准备哪些东西和哪些步骤,这几个维度来回答</p><h3 id="回答-10"><a href="#回答-10" class="headerlink" title="回答"></a>回答</h3><p>国际化的实现思路主要是通过 vue-i18n 国际化插件实现的</p><ul><li>1.首先需要提前准备好国际化需要的语言包,也就是语言之间的对应关系的语言包文件</li><li>2.在项目里安装了 vue-i18n 国际化包,在 Vue 原型上挂载了转化方法</li><li>3.在组件中需要做国际化的地方 通过转化方法$t,对对应的文字进行方法调用转化为特定的语言显示</li><li>4.在用户点击语言切换的下拉选项,通过给 $i18n.locale 赋值当前语言类型,页面会自动更换语言显示</li></ul><h2 id="问题11-项目发布之前要做哪些优化呢"><a href="#问题11-项目发布之前要做哪些优化呢" class="headerlink" title="问题11-项目发布之前要做哪些优化呢?"></a>问题11-项目发布之前要做哪些优化呢?</h2><h3 id="说明-11"><a href="#说明-11" class="headerlink" title="说明"></a>说明</h3><p>可以从如何打包,打包解决哪些问题,打包包含哪些具体内容,这几个维度来回答</p><h3 id="回答-11"><a href="#回答-11" class="headerlink" title="回答"></a>回答</h3><p>通过配置webpack优化打包文件的体积和通过npm run build命令执行打包</p><ul><li><p>1.上线的优化主要是为了让打包之后的文件足够小和首屏只加载必要的数据,来确保用户访问系统足够的快</p></li><li><p>2.为了让打包后的文件足够小,webpack打包默认会对js,css,图片进行压缩处理,其他包含了我们使用的第三方的库,为了避免把第三方库打进包中,我通过在 vue.config.js 中配置 externals 属性和在 public.html 中引入第三方库的cdn方式,确保打包文件足够小</p></li><li><p>3.让首屏加载足够快,我们对在路由配置当中,使用箭头函数返回组件的路由懒加载的方式,确保当路由被访问的时候才加载对应组件</p></li><li><p>4.后端也可以优化,例如通过gzip,对我们的包进一步压缩确保文件足够的小</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;h2 id=&quot;问题1-你先做个自我介绍&quot;&gt;&lt;a href=&quot;#问题1-你先做个自我介绍&quot; class=&quot;headerlink&quot; title=&quot;问</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/04/10/hello-world/"/>
    <id>http://example.com/2023/04/10/hello-world/</id>
    <published>2023-04-10T08:01:25.161Z</published>
    <updated>2023-04-10T08:00:56.639Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
